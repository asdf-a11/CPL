
#define SAFE true
#include <iostream>
#include <vector>
#include <cstddef>
#include "../CppFiles/CplCppList.hpp"
#include "../CppFiles/CplPtr.hpp"
#include "../CppFiles/CPLGraphics.hpp"

#define i32 int
#define i16 short
#define i8 signed char
#define f32 float
#define UNKNOWN int
#define byte unsigned char
#define ui8 byte

#define VARTYPE sizeof(int)

void printc(i32 character){
    std::cout << (char)character;
}
void printf(f32 value){
    std::cout << value;
}
void printn(i32 value){
    std::cout << value;
}
CPLPtr<ui8> shalloc(i32 size){
    CPLPtr<ui8> o;
    o.ptr = (char*)new ui8 [size];
    return o;
}

void cplMain(void)
{
	i32 SCREENX;
	i32 EXPTEMPVAR0;
	CPLPtr<i32> EXPTEMPVAR1;
	EXPTEMPVAR0 = SCREENX;
	EXPTEMPVAR1 = &(SCREENX);
	i32 EXPTEMPVAR2;
	EXPTEMPVAR2 = 600;
	*(EXPTEMPVAR1) = EXPTEMPVAR2;
	i32 SCREENY;
	i32 EXPTEMPVAR3;
	CPLPtr<i32> EXPTEMPVAR4;
	EXPTEMPVAR3 = SCREENY;
	EXPTEMPVAR4 = &(SCREENY);
	i32 EXPTEMPVAR5;
	EXPTEMPVAR5 = 600;
	*(EXPTEMPVAR4) = EXPTEMPVAR5;
	i32 PLAYERSIZEX;
	i32 EXPTEMPVAR6;
	CPLPtr<i32> EXPTEMPVAR7;
	EXPTEMPVAR6 = PLAYERSIZEX;
	EXPTEMPVAR7 = &(PLAYERSIZEX);
	i32 EXPTEMPVAR8;
	EXPTEMPVAR8 = 20;
	*(EXPTEMPVAR7) = EXPTEMPVAR8;
	i32 PLAYERSIZEY;
	i32 EXPTEMPVAR9;
	CPLPtr<i32> EXPTEMPVAR10;
	EXPTEMPVAR9 = PLAYERSIZEY;
	EXPTEMPVAR10 = &(PLAYERSIZEY);
	i32 EXPTEMPVAR11;
	EXPTEMPVAR11 = 20;
	*(EXPTEMPVAR10) = EXPTEMPVAR11;
	i32 EXPFUNCTIONARGUMENT0;
	EXPFUNCTIONARGUMENT0 = SCREENX;
	i32 EXPFUNCTIONARGUMENT1;
	EXPFUNCTIONARGUMENT1 = SCREENY;
	i32 EXPFUNCTIONRETURN2;
	EXPFUNCTIONRETURN2 = graphicsinit(EXPFUNCTIONARGUMENT0, EXPFUNCTIONARGUMENT1);
	i32 playerPosX;
	i32 EXPTEMPVAR12;
	CPLPtr<i32> EXPTEMPVAR13;
	EXPTEMPVAR12 = playerPosX;
	EXPTEMPVAR13 = &(playerPosX);
	i32 EXPTEMPVAR14;
	EXPTEMPVAR14 = SCREENX / 2;
	*(EXPTEMPVAR13) = EXPTEMPVAR14;
	i32 playerPosY;
	i32 EXPTEMPVAR15;
	CPLPtr<i32> EXPTEMPVAR16;
	EXPTEMPVAR15 = playerPosY;
	EXPTEMPVAR16 = &(playerPosY);
	i32 EXPTEMPVAR17;
	i32 EXPVAR0;
	EXPVAR0 = SCREENY - PLAYERSIZEY;
	EXPTEMPVAR17 = EXPVAR0 - 5;
	*(EXPTEMPVAR16) = EXPTEMPVAR17;
	CPLPtr<ui8> screenBuffer;
	CPLPtr<ui8> EXPTEMPVAR18;
	CPLPtr<CPLPtr<ui8>> EXPTEMPVAR19;
	EXPTEMPVAR18 = screenBuffer;
	EXPTEMPVAR19 = &(screenBuffer);
	CPLPtr<ui8> EXPTEMPVAR20;
	i32 EXPFUNCTIONARGUMENT3;
	i32 EXPVAR1;
	EXPVAR1 = SCREENX * SCREENY;
	EXPFUNCTIONARGUMENT3 = EXPVAR1 * 3;
	CPLPtr<ui8> EXPFUNCTIONRETURN4;
	EXPFUNCTIONRETURN4 = shalloc(EXPFUNCTIONARGUMENT3);
	EXPTEMPVAR20 = EXPFUNCTIONRETURN4;
	*(EXPTEMPVAR19) = EXPTEMPVAR20;
	auto drawScreenBuffer = [&](void)
	{
		i32 x;
		i32 EXPTEMPVAR21;
		CPLPtr<i32> EXPTEMPVAR22;
		EXPTEMPVAR21 = x;
		EXPTEMPVAR22 = &(x);
		i32 EXPTEMPVAR23;
		EXPTEMPVAR23 = 0;
		*(EXPTEMPVAR22) = EXPTEMPVAR23;
		i32 counter;
		i32 EXPTEMPVAR24;
		CPLPtr<i32> EXPTEMPVAR25;
		EXPTEMPVAR24 = counter;
		EXPTEMPVAR25 = &(counter);
		i32 EXPTEMPVAR26;
		EXPTEMPVAR26 = 0;
		*(EXPTEMPVAR25) = EXPTEMPVAR26;
		while(1)
		{
			UNKNOWN EXPVAR2;
			EXPVAR2 = x < SCREENX;
			EXPVAR2 = !EXPVAR2;
			if(EXPVAR2)
			{
				break;
			};
			i32 y;
			i32 EXPTEMPVAR27;
			CPLPtr<i32> EXPTEMPVAR28;
			EXPTEMPVAR27 = y;
			EXPTEMPVAR28 = &(y);
			i32 EXPTEMPVAR29;
			EXPTEMPVAR29 = 0;
			*(EXPTEMPVAR28) = EXPTEMPVAR29;
			while(1)
			{
				UNKNOWN EXPVAR3;
				EXPVAR3 = y < SCREENY;
				EXPVAR3 = !EXPVAR3;
				if(EXPVAR3)
				{
					break;
				};
				i32 EXPFUNCTIONARGUMENT5;
				EXPFUNCTIONARGUMENT5 = x;
				i32 EXPFUNCTIONARGUMENT6;
				EXPFUNCTIONARGUMENT6 = y;
				ui8 EXPFUNCTIONARGUMENT7;
				CPLPtr<ui8> EXPVAR4;
				EXPVAR4 = screenBuffer + counter;
				EXPFUNCTIONARGUMENT7 = *(EXPVAR4);
				ui8 EXPFUNCTIONARGUMENT8;
				CPLPtr<ui8> EXPVAR5;
				CPLPtr<ui8> EXPVAR6;
				EXPVAR6 = screenBuffer + counter;
				EXPVAR5 = EXPVAR6 + 1;
				EXPFUNCTIONARGUMENT8 = *(EXPVAR5);
				ui8 EXPFUNCTIONARGUMENT9;
				CPLPtr<ui8> EXPVAR7;
				CPLPtr<ui8> EXPVAR8;
				EXPVAR8 = screenBuffer + counter;
				EXPVAR7 = EXPVAR8 + 2;
				EXPFUNCTIONARGUMENT9 = *(EXPVAR7);
				i32 EXPFUNCTIONRETURN10;
				EXPFUNCTIONRETURN10 = drawpixel(EXPFUNCTIONARGUMENT5, EXPFUNCTIONARGUMENT6, EXPFUNCTIONARGUMENT7, EXPFUNCTIONARGUMENT8, EXPFUNCTIONARGUMENT9);
				i32 EXPTEMPVAR30;
				CPLPtr<i32> EXPTEMPVAR31;
				EXPTEMPVAR30 = counter;
				EXPTEMPVAR31 = &(counter);
				i32 EXPTEMPVAR32;
				EXPTEMPVAR32 = counter + 3;
				*(EXPTEMPVAR31) = EXPTEMPVAR32;
				i32 EXPTEMPVAR33;
				CPLPtr<i32> EXPTEMPVAR34;
				EXPTEMPVAR33 = y;
				EXPTEMPVAR34 = &(y);
				i32 EXPTEMPVAR35;
				EXPTEMPVAR35 = y + 1;
				*(EXPTEMPVAR34) = EXPTEMPVAR35;
			};
			i32 EXPTEMPVAR36;
			CPLPtr<i32> EXPTEMPVAR37;
			EXPTEMPVAR36 = x;
			EXPTEMPVAR37 = &(x);
			i32 EXPTEMPVAR38;
			EXPTEMPVAR38 = x + 1;
			*(EXPTEMPVAR37) = EXPTEMPVAR38;
		};
	};
	auto drawPlayer = [&](void)
	{
		i32 x;
		i32 EXPTEMPVAR39;
		CPLPtr<i32> EXPTEMPVAR40;
		EXPTEMPVAR39 = x;
		EXPTEMPVAR40 = &(x);
		i32 EXPTEMPVAR41;
		EXPTEMPVAR41 = 0;
		*(EXPTEMPVAR40) = EXPTEMPVAR41;
		while(1)
		{
			UNKNOWN EXPVAR9;
			EXPVAR9 = x < PLAYERSIZEX;
			EXPVAR9 = !EXPVAR9;
			if(EXPVAR9)
			{
				break;
			};
			i32 y;
			i32 EXPTEMPVAR42;
			CPLPtr<i32> EXPTEMPVAR43;
			EXPTEMPVAR42 = y;
			EXPTEMPVAR43 = &(y);
			i32 EXPTEMPVAR44;
			EXPTEMPVAR44 = 0;
			*(EXPTEMPVAR43) = EXPTEMPVAR44;
			while(1)
			{
				UNKNOWN EXPVAR10;
				EXPVAR10 = y < PLAYERSIZEY;
				EXPVAR10 = !EXPVAR10;
				if(EXPVAR10)
				{
					break;
				};
				i32 screenPos;
				i32 EXPTEMPVAR45;
				CPLPtr<i32> EXPTEMPVAR46;
				EXPTEMPVAR45 = screenPos;
				EXPTEMPVAR46 = &(screenPos);
				i32 EXPTEMPVAR47;
				i32 EXPVAR11;
				i32 EXPVAR12;
				i32 EXPVAR13;
				EXPVAR13 = playerPosX + x;
				EXPVAR12 = EXPVAR13 * SCREENX;
				i32 EXPVAR14;
				EXPVAR14 = playerPosY + y;
				EXPVAR11 = EXPVAR12 + EXPVAR14;
				EXPTEMPVAR47 = EXPVAR11 * 3;
				*(EXPTEMPVAR46) = EXPTEMPVAR47;
				ui8 EXPTEMPVAR48;
				CPLPtr<ui8> EXPTEMPVAR49;
				CPLPtr<ui8> EXPVAR15;
				EXPVAR15 = screenBuffer + screenPos;
				EXPTEMPVAR48 = *(EXPVAR15);
				EXPTEMPVAR49 = EXPVAR15;
				i32 EXPTEMPVAR50;
				EXPTEMPVAR50 = 255;
				*(EXPTEMPVAR49) = EXPTEMPVAR50;
				ui8 EXPTEMPVAR51;
				CPLPtr<ui8> EXPTEMPVAR52;
				CPLPtr<ui8> EXPVAR16;
				CPLPtr<ui8> EXPVAR17;
				EXPVAR17 = screenBuffer + screenPos;
				EXPVAR16 = EXPVAR17 + 1;
				EXPTEMPVAR51 = *(EXPVAR16);
				EXPTEMPVAR52 = EXPVAR16;
				i32 EXPTEMPVAR53;
				EXPTEMPVAR53 = 0;
				*(EXPTEMPVAR52) = EXPTEMPVAR53;
				ui8 EXPTEMPVAR54;
				CPLPtr<ui8> EXPTEMPVAR55;
				CPLPtr<ui8> EXPVAR18;
				CPLPtr<ui8> EXPVAR19;
				EXPVAR19 = screenBuffer + screenPos;
				EXPVAR18 = EXPVAR19 + 2;
				EXPTEMPVAR54 = *(EXPVAR18);
				EXPTEMPVAR55 = EXPVAR18;
				i32 EXPTEMPVAR56;
				EXPTEMPVAR56 = 30;
				*(EXPTEMPVAR55) = EXPTEMPVAR56;
				i32 EXPTEMPVAR57;
				CPLPtr<i32> EXPTEMPVAR58;
				EXPTEMPVAR57 = y;
				EXPTEMPVAR58 = &(y);
				i32 EXPTEMPVAR59;
				EXPTEMPVAR59 = y + 1;
				*(EXPTEMPVAR58) = EXPTEMPVAR59;
			};
			i32 EXPTEMPVAR60;
			CPLPtr<i32> EXPTEMPVAR61;
			EXPTEMPVAR60 = x;
			EXPTEMPVAR61 = &(x);
			i32 EXPTEMPVAR62;
			EXPTEMPVAR62 = x + 1;
			*(EXPTEMPVAR61) = EXPTEMPVAR62;
		};
	};
	while(1)
	{
		i32 EXPVAR20;
		EXPVAR20 = 1;
		EXPVAR20 = !EXPVAR20;
		if(EXPVAR20)
		{
			break;
		};
		drawPlayer();
		drawScreenBuffer();
		i32 EXPFUNCTIONARGUMENT13;
		EXPFUNCTIONARGUMENT13 = 1000;
		i32 EXPFUNCTIONRETURN14;
		EXPFUNCTIONRETURN14 = graphicssleep(EXPFUNCTIONARGUMENT13);
	};
	while(1)
	{
		i32 EXPVAR21;
		EXPVAR21 = 1;
		EXPVAR21 = !EXPVAR21;
		if(EXPVAR21)
		{
			break;
		};
	};
}


int main(){
    cplMain();
    return 0;
}

