
#define SAFE true
#include <iostream>
#include <vector>
#include <cstddef>
#include <cmath>
#include "../CppFiles/CplCppList.hpp"
#include "../CppFiles/CplPtr.hpp"
#include "../CppFiles/CPLGraphics.hpp"

using std::vector;

#define i32 int
#define i16 short
#define i8 signed char
#define f32 float
#define UNKNOWN int
#define byte unsigned char
//#define ui8 byte
#define ui8 i32
#define type char

#define arctan std::atan

#define VARTYPE sizeof(int)

void printc(i32 character){
    std::cout << (char)character;
}
void printf(f32 value){
    std::cout << value;
}
void printn(i32 value){
    std::cout << value;
}
CPLPtr<ui8> shalloc(i32 size){
    CPLPtr<ui8> o;
    o.ptr = (char*)new ui8 [size];
    return o;
}
using std::cos;
using std::sin;
using std::tan;
using std::sqrt;

void cplMain(void)
{
	i32 MAPSX;
	i32 EXPTEMPVAR0;
	CPLPtr<i32> EXPTEMPVAR1;
	EXPTEMPVAR0 = MAPSX;
	EXPTEMPVAR1 = &(MAPSX);
	i32 EXPTEMPVAR2;
	EXPTEMPVAR2 = 5;
	*(EXPTEMPVAR1) = EXPTEMPVAR2;
	i32 MAPSY;
	i32 EXPTEMPVAR3;
	CPLPtr<i32> EXPTEMPVAR4;
	EXPTEMPVAR3 = MAPSY;
	EXPTEMPVAR4 = &(MAPSY);
	i32 EXPTEMPVAR5;
	EXPTEMPVAR5 = 5;
	*(EXPTEMPVAR4) = EXPTEMPVAR5;
	i32 EXPTEMPVAR6;
	EXPTEMPVAR6 = MAPSY;
	i32 EXPTEMPVAR7;
	EXPTEMPVAR7 = MAPSX;
	vector<vector<ui8>> map;
	map.resize(EXPTEMPVAR7);
	for(int l52 = 0;l52 < EXPTEMPVAR7; l52++){
		map[l52].resize(EXPTEMPVAR6);
	}
	vector<vector<ui8>> EXPTEMPVAR8;
	EXPTEMPVAR8.resize(EXPTEMPVAR7);
	for(int l68 = 0;l68 < EXPTEMPVAR7; l68++){
		EXPTEMPVAR8[l68].resize(EXPTEMPVAR6);
	}
	CPLPtr<vector<vector<ui8>>> EXPTEMPVAR9;
	EXPTEMPVAR8 = map;
	EXPTEMPVAR9 = &(map);
	vector<vector<i32>> EXPTEMPVAR10;
	EXPTEMPVAR10.resize(5);
	for(int l60 = 0;l60 < 5; l60++){
		EXPTEMPVAR10[l60].resize(5);
	}
	vector<i32> EXPVAR0;
	EXPVAR0.resize(5);
	i32 EXPVAR1;
	EXPVAR1 = 1;
	i32 EXPVAR2;
	EXPVAR2 = 1;
	i32 EXPVAR3;
	EXPVAR3 = 1;
	i32 EXPVAR4;
	EXPVAR4 = 1;
	i32 EXPVAR5;
	EXPVAR5 = 1;
	vector<i32> EXPVAR6;
	EXPVAR6.resize(5);
	EXPVAR6[0] = EXPVAR1;
	EXPVAR6[1] = EXPVAR2;
	EXPVAR6[2] = EXPVAR3;
	EXPVAR6[3] = EXPVAR4;
	EXPVAR6[4] = EXPVAR5;
	EXPVAR0 = EXPVAR6;
	vector<i32> EXPVAR7;
	EXPVAR7.resize(5);
	i32 EXPVAR8;
	EXPVAR8 = 1;
	i32 EXPVAR9;
	EXPVAR9 = 0;
	i32 EXPVAR10;
	EXPVAR10 = 0;
	i32 EXPVAR11;
	EXPVAR11 = 0;
	i32 EXPVAR12;
	EXPVAR12 = 1;
	vector<i32> EXPVAR13;
	EXPVAR13.resize(5);
	EXPVAR13[0] = EXPVAR8;
	EXPVAR13[1] = EXPVAR9;
	EXPVAR13[2] = EXPVAR10;
	EXPVAR13[3] = EXPVAR11;
	EXPVAR13[4] = EXPVAR12;
	EXPVAR7 = EXPVAR13;
	vector<i32> EXPVAR14;
	EXPVAR14.resize(5);
	i32 EXPVAR15;
	EXPVAR15 = 1;
	i32 EXPVAR16;
	EXPVAR16 = 0;
	i32 EXPVAR17;
	EXPVAR17 = 0;
	i32 EXPVAR18;
	EXPVAR18 = 0;
	i32 EXPVAR19;
	EXPVAR19 = 1;
	vector<i32> EXPVAR20;
	EXPVAR20.resize(5);
	EXPVAR20[0] = EXPVAR15;
	EXPVAR20[1] = EXPVAR16;
	EXPVAR20[2] = EXPVAR17;
	EXPVAR20[3] = EXPVAR18;
	EXPVAR20[4] = EXPVAR19;
	EXPVAR14 = EXPVAR20;
	vector<i32> EXPVAR21;
	EXPVAR21.resize(5);
	i32 EXPVAR22;
	EXPVAR22 = 1;
	i32 EXPVAR23;
	EXPVAR23 = 0;
	i32 EXPVAR24;
	EXPVAR24 = 1;
	i32 EXPVAR25;
	EXPVAR25 = 0;
	i32 EXPVAR26;
	EXPVAR26 = 1;
	vector<i32> EXPVAR27;
	EXPVAR27.resize(5);
	EXPVAR27[0] = EXPVAR22;
	EXPVAR27[1] = EXPVAR23;
	EXPVAR27[2] = EXPVAR24;
	EXPVAR27[3] = EXPVAR25;
	EXPVAR27[4] = EXPVAR26;
	EXPVAR21 = EXPVAR27;
	vector<i32> EXPVAR28;
	EXPVAR28.resize(5);
	i32 EXPVAR29;
	EXPVAR29 = 1;
	i32 EXPVAR30;
	EXPVAR30 = 1;
	i32 EXPVAR31;
	EXPVAR31 = 1;
	i32 EXPVAR32;
	EXPVAR32 = 1;
	i32 EXPVAR33;
	EXPVAR33 = 1;
	vector<i32> EXPVAR34;
	EXPVAR34.resize(5);
	EXPVAR34[0] = EXPVAR29;
	EXPVAR34[1] = EXPVAR30;
	EXPVAR34[2] = EXPVAR31;
	EXPVAR34[3] = EXPVAR32;
	EXPVAR34[4] = EXPVAR33;
	EXPVAR28 = EXPVAR34;
	vector<vector<i32>> EXPVAR35;
	EXPVAR35.resize(5);
	for(int l52 = 0;l52 < 5; l52++){
		EXPVAR35[l52].resize(5);
	}
	EXPVAR35[0] = EXPVAR0;
	EXPVAR35[1] = EXPVAR7;
	EXPVAR35[2] = EXPVAR14;
	EXPVAR35[3] = EXPVAR21;
	EXPVAR35[4] = EXPVAR28;
	EXPTEMPVAR10 = EXPVAR35;
	*(EXPTEMPVAR9) = EXPTEMPVAR10;
	i32 SCREENX;
	i32 EXPTEMPVAR11;
	CPLPtr<i32> EXPTEMPVAR12;
	EXPTEMPVAR11 = SCREENX;
	EXPTEMPVAR12 = &(SCREENX);
	i32 EXPTEMPVAR13;
	EXPTEMPVAR13 = 600;
	*(EXPTEMPVAR12) = EXPTEMPVAR13;
	i32 SCREENY;
	i32 EXPTEMPVAR14;
	CPLPtr<i32> EXPTEMPVAR15;
	EXPTEMPVAR14 = SCREENY;
	EXPTEMPVAR15 = &(SCREENY);
	i32 EXPTEMPVAR16;
	EXPTEMPVAR16 = 600;
	*(EXPTEMPVAR15) = EXPTEMPVAR16;
	CPLPtr<ui8> screenBuffer;
	CPLPtr<ui8> EXPTEMPVAR17;
	CPLPtr<CPLPtr<ui8>> EXPTEMPVAR18;
	EXPTEMPVAR17 = screenBuffer;
	EXPTEMPVAR18 = &(screenBuffer);
	CPLPtr<ui8> EXPTEMPVAR19;
	i32 EXPVAR36;
	i32 EXPVAR37;
	EXPVAR37 = SCREENX * SCREENY;
	EXPVAR36 = EXPVAR37 * 3;
	CPLPtr<ui8> EXPVAR38;
	EXPVAR38 = shalloc(EXPVAR36);
	EXPTEMPVAR19 = EXPVAR38;
	*(EXPTEMPVAR18) = EXPTEMPVAR19;
	f32 playerX;
	f32 EXPTEMPVAR20;
	CPLPtr<f32> EXPTEMPVAR21;
	EXPTEMPVAR20 = playerX;
	EXPTEMPVAR21 = &(playerX);
	f32 EXPTEMPVAR22;
	EXPTEMPVAR22 = 2.0;
	*(EXPTEMPVAR21) = EXPTEMPVAR22;
	f32 playerY;
	f32 EXPTEMPVAR23;
	CPLPtr<f32> EXPTEMPVAR24;
	EXPTEMPVAR23 = playerY;
	EXPTEMPVAR24 = &(playerY);
	f32 EXPTEMPVAR25;
	EXPTEMPVAR25 = 2.0;
	*(EXPTEMPVAR24) = EXPTEMPVAR25;
	f32 playerRot;
	f32 EXPTEMPVAR26;
	CPLPtr<f32> EXPTEMPVAR27;
	EXPTEMPVAR26 = playerRot;
	EXPTEMPVAR27 = &(playerRot);
	f32 EXPTEMPVAR28;
	EXPTEMPVAR28 = 0.5;
	*(EXPTEMPVAR27) = EXPTEMPVAR28;
	auto drawScreenBuffer = [&](void)
	{
		i32 x;
		i32 EXPTEMPVAR29;
		CPLPtr<i32> EXPTEMPVAR30;
		EXPTEMPVAR29 = x;
		EXPTEMPVAR30 = &(x);
		i32 EXPTEMPVAR31;
		EXPTEMPVAR31 = 0;
		*(EXPTEMPVAR30) = EXPTEMPVAR31;
		i32 counter;
		i32 EXPTEMPVAR32;
		CPLPtr<i32> EXPTEMPVAR33;
		EXPTEMPVAR32 = counter;
		EXPTEMPVAR33 = &(counter);
		i32 EXPTEMPVAR34;
		EXPTEMPVAR34 = 0;
		*(EXPTEMPVAR33) = EXPTEMPVAR34;
		while(1)
		{
			UNKNOWN EXPVAR39;
			EXPVAR39 = x < SCREENX;
			EXPVAR39 = !EXPVAR39;
			if(EXPVAR39)
			{
				break;
			}
			i32 y;
			i32 EXPTEMPVAR35;
			CPLPtr<i32> EXPTEMPVAR36;
			EXPTEMPVAR35 = y;
			EXPTEMPVAR36 = &(y);
			i32 EXPTEMPVAR37;
			EXPTEMPVAR37 = 0;
			*(EXPTEMPVAR36) = EXPTEMPVAR37;
			while(1)
			{
				UNKNOWN EXPVAR40;
				EXPVAR40 = y < SCREENY;
				EXPVAR40 = !EXPVAR40;
				if(EXPVAR40)
				{
					break;
				}
				i32 EXPVAR41;
				EXPVAR41 = x;
				i32 EXPVAR42;
				EXPVAR42 = y;
				ui8 EXPVAR43;
				CPLPtr<ui8> EXPVAR44;
				EXPVAR44 = screenBuffer + counter;
				EXPVAR43 = *(EXPVAR44);
				ui8 EXPVAR45;
				CPLPtr<ui8> EXPVAR46;
				CPLPtr<ui8> EXPVAR47;
				EXPVAR47 = screenBuffer + counter;
				EXPVAR46 = EXPVAR47 + 1;
				EXPVAR45 = *(EXPVAR46);
				ui8 EXPVAR48;
				CPLPtr<ui8> EXPVAR49;
				CPLPtr<ui8> EXPVAR50;
				EXPVAR50 = screenBuffer + counter;
				EXPVAR49 = EXPVAR50 + 2;
				EXPVAR48 = *(EXPVAR49);
				i32 EXPVAR51;
				EXPVAR51 = drawpixel(EXPVAR41, EXPVAR42, EXPVAR43, EXPVAR45, EXPVAR48);
				i32 EXPTEMPVAR38;
				CPLPtr<i32> EXPTEMPVAR39;
				EXPTEMPVAR38 = counter;
				EXPTEMPVAR39 = &(counter);
				i32 EXPTEMPVAR40;
				EXPTEMPVAR40 = counter + 3;
				*(EXPTEMPVAR39) = EXPTEMPVAR40;
				i32 EXPTEMPVAR41;
				CPLPtr<i32> EXPTEMPVAR42;
				EXPTEMPVAR41 = y;
				EXPTEMPVAR42 = &(y);
				i32 EXPTEMPVAR43;
				EXPTEMPVAR43 = y + 1;
				*(EXPTEMPVAR42) = EXPTEMPVAR43;
			}
			i32 EXPTEMPVAR44;
			CPLPtr<i32> EXPTEMPVAR45;
			EXPTEMPVAR44 = x;
			EXPTEMPVAR45 = &(x);
			i32 EXPTEMPVAR46;
			EXPTEMPVAR46 = x + 1;
			*(EXPTEMPVAR45) = EXPTEMPVAR46;
		}
	};
	auto drawRect = [&](i32 xPos, i32 yPos, i32 sx, i32 sy)
	{
		i32 x;
		i32 EXPTEMPVAR47;
		CPLPtr<i32> EXPTEMPVAR48;
		EXPTEMPVAR47 = x;
		EXPTEMPVAR48 = &(x);
		i32 EXPTEMPVAR49;
		EXPTEMPVAR49 = 0;
		*(EXPTEMPVAR48) = EXPTEMPVAR49;
		while(1)
		{
			UNKNOWN EXPVAR52;
			EXPVAR52 = x < sx;
			EXPVAR52 = !EXPVAR52;
			if(EXPVAR52)
			{
				break;
			}
			i32 y;
			i32 EXPTEMPVAR50;
			CPLPtr<i32> EXPTEMPVAR51;
			EXPTEMPVAR50 = y;
			EXPTEMPVAR51 = &(y);
			i32 EXPTEMPVAR52;
			EXPTEMPVAR52 = 0;
			*(EXPTEMPVAR51) = EXPTEMPVAR52;
			while(1)
			{
				UNKNOWN EXPVAR53;
				EXPVAR53 = y < sy;
				EXPVAR53 = !EXPVAR53;
				if(EXPVAR53)
				{
					break;
				}
				i32 screenPos;
				i32 EXPTEMPVAR53;
				CPLPtr<i32> EXPTEMPVAR54;
				EXPTEMPVAR53 = screenPos;
				EXPTEMPVAR54 = &(screenPos);
				i32 EXPTEMPVAR55;
				i32 EXPVAR54;
				i32 EXPVAR55;
				i32 EXPVAR56;
				EXPVAR56 = xPos + x;
				EXPVAR55 = EXPVAR56 * SCREENX;
				i32 EXPVAR57;
				EXPVAR57 = yPos + y;
				EXPVAR54 = EXPVAR55 + EXPVAR57;
				EXPTEMPVAR55 = EXPVAR54 * 3;
				*(EXPTEMPVAR54) = EXPTEMPVAR55;
				UNKNOWN EXPVAR58;
				UNKNOWN EXPVAR59;
				i32 EXPVAR60;
				i32 EXPVAR61;
				i32 EXPVAR62;
				i32 EXPVAR63;
				i32 EXPVAR64;
				EXPVAR64 = SCREENX * SCREENY;
				EXPVAR63 = EXPVAR64 * 3;
				EXPVAR62 = EXPVAR63 + 0;
				EXPVAR61 = EXPVAR62 + 0;
				EXPVAR60 = EXPVAR61 - 3;
				EXPVAR59 = screenPos < EXPVAR60;
				UNKNOWN EXPVAR65;
				EXPVAR65 = screenPos < 0;
				EXPVAR58 = EXPVAR59 or EXPVAR65;
				if(EXPVAR58)
				{
					ui8 EXPTEMPVAR56;
					CPLPtr<ui8> EXPTEMPVAR57;
					CPLPtr<ui8> EXPVAR66;
					EXPVAR66 = screenBuffer + screenPos;
					EXPTEMPVAR56 = *(EXPVAR66);
					EXPTEMPVAR57 = EXPVAR66;
					i32 EXPTEMPVAR58;
					EXPTEMPVAR58 = 85 / 2;
					*(EXPTEMPVAR57) = EXPTEMPVAR58;
					ui8 EXPTEMPVAR59;
					CPLPtr<ui8> EXPTEMPVAR60;
					CPLPtr<ui8> EXPVAR67;
					CPLPtr<ui8> EXPVAR68;
					EXPVAR68 = screenBuffer + screenPos;
					EXPVAR67 = EXPVAR68 + 1;
					EXPTEMPVAR59 = *(EXPVAR67);
					EXPTEMPVAR60 = EXPVAR67;
					i32 EXPTEMPVAR61;
					EXPTEMPVAR61 = 62 / 2;
					*(EXPTEMPVAR60) = EXPTEMPVAR61;
					ui8 EXPTEMPVAR62;
					CPLPtr<ui8> EXPTEMPVAR63;
					CPLPtr<ui8> EXPVAR69;
					CPLPtr<ui8> EXPVAR70;
					EXPVAR70 = screenBuffer + screenPos;
					EXPVAR69 = EXPVAR70 + 2;
					EXPTEMPVAR62 = *(EXPVAR69);
					EXPTEMPVAR63 = EXPVAR69;
					i32 EXPTEMPVAR64;
					EXPTEMPVAR64 = 67 / 2;
					*(EXPTEMPVAR63) = EXPTEMPVAR64;
				}
				i32 EXPTEMPVAR65;
				CPLPtr<i32> EXPTEMPVAR66;
				EXPTEMPVAR65 = y;
				EXPTEMPVAR66 = &(y);
				i32 EXPTEMPVAR67;
				EXPTEMPVAR67 = y + 1;
				*(EXPTEMPVAR66) = EXPTEMPVAR67;
			}
			i32 EXPTEMPVAR68;
			CPLPtr<i32> EXPTEMPVAR69;
			EXPTEMPVAR68 = x;
			EXPTEMPVAR69 = &(x);
			i32 EXPTEMPVAR70;
			EXPTEMPVAR70 = x + 1;
			*(EXPTEMPVAR69) = EXPTEMPVAR70;
		}
	};
	auto drawLine = [&](i32 xPos, i32 ySize, f32 depth)
	{
		i32 y;
		i32 EXPTEMPVAR71;
		CPLPtr<i32> EXPTEMPVAR72;
		EXPTEMPVAR71 = y;
		EXPTEMPVAR72 = &(y);
		i32 EXPTEMPVAR73;
		EXPTEMPVAR73 = 0;
		*(EXPTEMPVAR72) = EXPTEMPVAR73;
		UNKNOWN EXPVAR71;
		UNKNOWN EXPVAR72;
		EXPVAR72 = xPos < 0;
		UNKNOWN EXPVAR73;
		EXPVAR73 = xPos > SCREENX;
		EXPVAR71 = EXPVAR72 or EXPVAR73;
		if(EXPVAR71)
		{
		}
		else
		{
			i32 y;
			i32 EXPTEMPVAR74;
			CPLPtr<i32> EXPTEMPVAR75;
			EXPTEMPVAR74 = y;
			EXPTEMPVAR75 = &(y);
			i32 EXPTEMPVAR76;
			i32 EXPVAR74;
			i32 EXPVAR75;
			EXPVAR75 = SCREENY / 2;
			EXPVAR74 = EXPVAR75 + 0;
			i32 EXPVAR76;
			EXPVAR76 = ySize / 2;
			EXPTEMPVAR76 = EXPVAR74 - EXPVAR76;
			*(EXPTEMPVAR75) = EXPTEMPVAR76;
			while(1)
			{
				UNKNOWN EXPVAR77;
				i32 EXPVAR78;
				i32 EXPVAR79;
				EXPVAR79 = SCREENY / 2;
				i32 EXPVAR80;
				EXPVAR80 = ySize / 2;
				EXPVAR78 = EXPVAR79 + EXPVAR80;
				EXPVAR77 = y < EXPVAR78;
				EXPVAR77 = !EXPVAR77;
				if(EXPVAR77)
				{
					break;
				}
				UNKNOWN EXPVAR81;
				UNKNOWN EXPVAR82;
				EXPVAR82 = y < 0;
				UNKNOWN EXPVAR83;
				i32 EXPVAR84;
				i32 EXPVAR85;
				i32 EXPVAR86;
				EXPVAR86 = SCREENY + 0;
				EXPVAR85 = EXPVAR86 + 0;
				EXPVAR84 = EXPVAR85 - 1;
				EXPVAR83 = y > EXPVAR84;
				EXPVAR81 = EXPVAR82 or EXPVAR83;
				if(EXPVAR81)
				{
				}
				else
				{
					i32 screenPos;
					i32 EXPTEMPVAR77;
					CPLPtr<i32> EXPTEMPVAR78;
					EXPTEMPVAR77 = screenPos;
					EXPTEMPVAR78 = &(screenPos);
					i32 EXPTEMPVAR79;
					i32 EXPVAR87;
					i32 EXPVAR88;
					EXPVAR88 = xPos * SCREENX;
					EXPVAR87 = EXPVAR88 + y;
					EXPTEMPVAR79 = EXPVAR87 * 3;
					*(EXPTEMPVAR78) = EXPTEMPVAR79;
					ui8 EXPTEMPVAR80;
					CPLPtr<ui8> EXPTEMPVAR81;
					CPLPtr<ui8> EXPVAR89;
					CPLPtr<ui8> EXPVAR90;
					EXPVAR90 = screenBuffer + screenPos;
					EXPVAR89 = EXPVAR90 + 1;
					EXPTEMPVAR80 = *(EXPVAR89);
					EXPTEMPVAR81 = EXPVAR89;
					f32 EXPTEMPVAR82;
					EXPTEMPVAR82 = 53 / depth;
					*(EXPTEMPVAR81) = EXPTEMPVAR82;
					ui8 EXPTEMPVAR83;
					CPLPtr<ui8> EXPTEMPVAR84;
					CPLPtr<ui8> EXPVAR91;
					CPLPtr<ui8> EXPVAR92;
					EXPVAR92 = screenBuffer + screenPos;
					EXPVAR91 = EXPVAR92 + 2;
					EXPTEMPVAR83 = *(EXPVAR91);
					EXPTEMPVAR84 = EXPVAR91;
					f32 EXPTEMPVAR85;
					EXPTEMPVAR85 = 62 / depth;
					*(EXPTEMPVAR84) = EXPTEMPVAR85;
					ui8 EXPTEMPVAR86;
					CPLPtr<ui8> EXPTEMPVAR87;
					CPLPtr<ui8> EXPVAR93;
					CPLPtr<ui8> EXPVAR94;
					EXPVAR94 = screenBuffer + screenPos;
					EXPVAR93 = EXPVAR94 + 3;
					EXPTEMPVAR86 = *(EXPVAR93);
					EXPTEMPVAR87 = EXPVAR93;
					f32 EXPTEMPVAR88;
					EXPTEMPVAR88 = 67 / depth;
					*(EXPTEMPVAR87) = EXPTEMPVAR88;
				}
				i32 EXPTEMPVAR89;
				CPLPtr<i32> EXPTEMPVAR90;
				EXPTEMPVAR89 = y;
				EXPTEMPVAR90 = &(y);
				i32 EXPTEMPVAR91;
				EXPTEMPVAR91 = y + 1;
				*(EXPTEMPVAR90) = EXPTEMPVAR91;
			}
		}
	};
	auto clearScreen = [&](void)
	{
		i32 counter;
		i32 EXPTEMPVAR92;
		CPLPtr<i32> EXPTEMPVAR93;
		EXPTEMPVAR92 = counter;
		EXPTEMPVAR93 = &(counter);
		i32 EXPTEMPVAR94;
		EXPTEMPVAR94 = 0;
		*(EXPTEMPVAR93) = EXPTEMPVAR94;
		while(1)
		{
			UNKNOWN EXPVAR95;
			i32 EXPVAR96;
			i32 EXPVAR97;
			EXPVAR97 = SCREENX * SCREENY;
			EXPVAR96 = EXPVAR97 * 3;
			EXPVAR95 = counter < EXPVAR96;
			EXPVAR95 = !EXPVAR95;
			if(EXPVAR95)
			{
				break;
			}
			ui8 EXPTEMPVAR95;
			CPLPtr<ui8> EXPTEMPVAR96;
			CPLPtr<ui8> EXPVAR98;
			EXPVAR98 = screenBuffer + counter;
			EXPTEMPVAR95 = *(EXPVAR98);
			EXPTEMPVAR96 = EXPVAR98;
			i32 EXPTEMPVAR97;
			EXPTEMPVAR97 = 135;
			*(EXPTEMPVAR96) = EXPTEMPVAR97;
			i32 EXPTEMPVAR98;
			CPLPtr<i32> EXPTEMPVAR99;
			EXPTEMPVAR98 = counter;
			EXPTEMPVAR99 = &(counter);
			i32 EXPTEMPVAR100;
			EXPTEMPVAR100 = counter + 1;
			*(EXPTEMPVAR99) = EXPTEMPVAR100;
			ui8 EXPTEMPVAR101;
			CPLPtr<ui8> EXPTEMPVAR102;
			CPLPtr<ui8> EXPVAR99;
			EXPVAR99 = screenBuffer + counter;
			EXPTEMPVAR101 = *(EXPVAR99);
			EXPTEMPVAR102 = EXPVAR99;
			i32 EXPTEMPVAR103;
			EXPTEMPVAR103 = 206;
			*(EXPTEMPVAR102) = EXPTEMPVAR103;
			i32 EXPTEMPVAR104;
			CPLPtr<i32> EXPTEMPVAR105;
			EXPTEMPVAR104 = counter;
			EXPTEMPVAR105 = &(counter);
			i32 EXPTEMPVAR106;
			EXPTEMPVAR106 = counter + 1;
			*(EXPTEMPVAR105) = EXPTEMPVAR106;
			ui8 EXPTEMPVAR107;
			CPLPtr<ui8> EXPTEMPVAR108;
			CPLPtr<ui8> EXPVAR100;
			EXPVAR100 = screenBuffer + counter;
			EXPTEMPVAR107 = *(EXPVAR100);
			EXPTEMPVAR108 = EXPVAR100;
			i32 EXPTEMPVAR109;
			EXPTEMPVAR109 = 235;
			*(EXPTEMPVAR108) = EXPTEMPVAR109;
			i32 EXPTEMPVAR110;
			CPLPtr<i32> EXPTEMPVAR111;
			EXPTEMPVAR110 = counter;
			EXPTEMPVAR111 = &(counter);
			i32 EXPTEMPVAR112;
			EXPTEMPVAR112 = counter + 1;
			*(EXPTEMPVAR111) = EXPTEMPVAR112;
		}
	};
	auto println = [&](void)
	{
		i32 EXPVAR101;
		EXPVAR101 = 10;
		printc(EXPVAR101);
		i32 EXPVAR103;
		EXPVAR103 = 13;
		printc(EXPVAR103);
	};
	auto getDepth = [&](f32 fovCounter)
	{
		f32 STEPSIZE;
		f32 EXPTEMPVAR113;
		CPLPtr<f32> EXPTEMPVAR114;
		EXPTEMPVAR113 = STEPSIZE;
		EXPTEMPVAR114 = &(STEPSIZE);
		f32 EXPTEMPVAR115;
		EXPTEMPVAR115 = 0.01;
		*(EXPTEMPVAR114) = EXPTEMPVAR115;
		f32 value;
		f32 EXPTEMPVAR116;
		CPLPtr<f32> EXPTEMPVAR117;
		EXPTEMPVAR116 = value;
		EXPTEMPVAR117 = &(value);
		f32 EXPTEMPVAR118;
		f32 EXPVAR105;
		EXPVAR105 = fovCounter;
		f32 EXPVAR106;
		EXPVAR106 = arctan(EXPVAR105);
		EXPTEMPVAR118 = EXPVAR106;
		*(EXPTEMPVAR117) = EXPTEMPVAR118;
		f32 theta;
		f32 EXPTEMPVAR119;
		CPLPtr<f32> EXPTEMPVAR120;
		EXPTEMPVAR119 = theta;
		EXPTEMPVAR120 = &(theta);
		f32 EXPTEMPVAR121;
		EXPTEMPVAR121 = playerRot;
		*(EXPTEMPVAR120) = EXPTEMPVAR121;
		f32 x;
		f32 EXPTEMPVAR122;
		CPLPtr<f32> EXPTEMPVAR123;
		EXPTEMPVAR122 = x;
		EXPTEMPVAR123 = &(x);
		f32 EXPTEMPVAR124;
		f32 EXPVAR107;
		EXPVAR107 = theta;
		f32 EXPVAR108;
		EXPVAR108 = cos(EXPVAR107);
		f32 EXPVAR109;
		EXPVAR109 = theta;
		f32 EXPVAR110;
		EXPVAR110 = sin(EXPVAR109);
		f32 EXPVAR111;
		EXPVAR111 = EXPVAR108 * value;
		EXPTEMPVAR124 = EXPVAR111 + EXPVAR110;
		*(EXPTEMPVAR123) = EXPTEMPVAR124;
		f32 y;
		f32 EXPTEMPVAR125;
		CPLPtr<f32> EXPTEMPVAR126;
		EXPTEMPVAR125 = y;
		EXPTEMPVAR126 = &(y);
		f32 EXPTEMPVAR127;
		f32 EXPVAR112;
		EXPVAR112 = theta;
		f32 EXPVAR113;
		EXPVAR113 = sin(EXPVAR112);
		f32 EXPVAR114;
		EXPVAR114 = theta;
		f32 EXPVAR115;
		EXPVAR115 = cos(EXPVAR114);
		f32 EXPVAR116;
		i32 EXPVAR117;
		EXPVAR117 = 0 + 0;
		f32 EXPVAR118;
		EXPVAR118 = EXPVAR113 * value;
		EXPVAR116 = EXPVAR117 - EXPVAR118;
		EXPTEMPVAR127 = EXPVAR116 + EXPVAR115;
		*(EXPTEMPVAR126) = EXPTEMPVAR127;
		i32 MAXSTEPS;
		i32 EXPTEMPVAR128;
		CPLPtr<i32> EXPTEMPVAR129;
		EXPTEMPVAR128 = MAXSTEPS;
		EXPTEMPVAR129 = &(MAXSTEPS);
		f32 EXPTEMPVAR130;
		EXPTEMPVAR130 = 7.0 / STEPSIZE;
		*(EXPTEMPVAR129) = EXPTEMPVAR130;
		i32 stepCounter;
		i32 EXPTEMPVAR131;
		CPLPtr<i32> EXPTEMPVAR132;
		EXPTEMPVAR131 = stepCounter;
		EXPTEMPVAR132 = &(stepCounter);
		i32 EXPTEMPVAR133;
		EXPTEMPVAR133 = 0;
		*(EXPTEMPVAR132) = EXPTEMPVAR133;
		f32 rayXPos;
		f32 EXPTEMPVAR134;
		CPLPtr<f32> EXPTEMPVAR135;
		EXPTEMPVAR134 = rayXPos;
		EXPTEMPVAR135 = &(rayXPos);
		f32 EXPTEMPVAR136;
		EXPTEMPVAR136 = playerX;
		*(EXPTEMPVAR135) = EXPTEMPVAR136;
		f32 rayYPos;
		f32 EXPTEMPVAR137;
		CPLPtr<f32> EXPTEMPVAR138;
		EXPTEMPVAR137 = rayYPos;
		EXPTEMPVAR138 = &(rayYPos);
		f32 EXPTEMPVAR139;
		EXPTEMPVAR139 = playerY;
		*(EXPTEMPVAR138) = EXPTEMPVAR139;
		while(1)
		{
			UNKNOWN EXPVAR119;
			EXPVAR119 = stepCounter < MAXSTEPS;
			EXPVAR119 = !EXPVAR119;
			if(EXPVAR119)
			{
				break;
			}
			f32 EXPTEMPVAR140;
			CPLPtr<f32> EXPTEMPVAR141;
			EXPTEMPVAR140 = rayXPos;
			EXPTEMPVAR141 = &(rayXPos);
			f32 EXPTEMPVAR142;
			f32 EXPVAR120;
			EXPVAR120 = x * STEPSIZE;
			EXPTEMPVAR142 = rayXPos + EXPVAR120;
			*(EXPTEMPVAR141) = EXPTEMPVAR142;
			f32 EXPTEMPVAR143;
			CPLPtr<f32> EXPTEMPVAR144;
			EXPTEMPVAR143 = rayYPos;
			EXPTEMPVAR144 = &(rayYPos);
			f32 EXPTEMPVAR145;
			f32 EXPVAR121;
			EXPVAR121 = y * STEPSIZE;
			EXPTEMPVAR145 = rayYPos + EXPVAR121;
			*(EXPTEMPVAR144) = EXPTEMPVAR145;
			i32 a;
			i32 EXPTEMPVAR146;
			CPLPtr<i32> EXPTEMPVAR147;
			EXPTEMPVAR146 = a;
			EXPTEMPVAR147 = &(a);
			f32 EXPTEMPVAR148;
			EXPTEMPVAR148 = rayXPos;
			*(EXPTEMPVAR147) = EXPTEMPVAR148;
			i32 b;
			i32 EXPTEMPVAR149;
			CPLPtr<i32> EXPTEMPVAR150;
			EXPTEMPVAR149 = b;
			EXPTEMPVAR150 = &(b);
			f32 EXPTEMPVAR151;
			EXPTEMPVAR151 = rayYPos;
			*(EXPTEMPVAR150) = EXPTEMPVAR151;
			ui8 v;
			ui8 EXPTEMPVAR152;
			CPLPtr<ui8> EXPTEMPVAR153;
			EXPTEMPVAR152 = v;
			EXPTEMPVAR153 = &(v);
			ui8 EXPTEMPVAR154;
			i32 EXPVAR122;
			EXPVAR122 = a;
			vector<ui8> EXPVAR123;
			EXPVAR123.resize(EXPTEMPVAR6);
			EXPVAR123 = map[EXPVAR122];
			i32 EXPVAR124;
			EXPVAR124 = b;
			ui8 EXPVAR125;
			EXPVAR125 = EXPVAR123[EXPVAR124];
			EXPTEMPVAR154 = EXPVAR125;
			*(EXPTEMPVAR153) = EXPTEMPVAR154;
			UNKNOWN EXPVAR126;
			EXPVAR126 = v == 1;
			if(EXPVAR126)
			{
				f32 EXPTEMPVAR155;
				EXPTEMPVAR155 = STEPSIZE * stepCounter;
				return EXPTEMPVAR155;
			}
			i32 EXPTEMPVAR156;
			CPLPtr<i32> EXPTEMPVAR157;
			EXPTEMPVAR156 = stepCounter;
			EXPTEMPVAR157 = &(stepCounter);
			i32 EXPTEMPVAR158;
			EXPTEMPVAR158 = stepCounter + 1;
			*(EXPTEMPVAR157) = EXPTEMPVAR158;
		}
		f32 EXPTEMPVAR159;
		EXPTEMPVAR159 = 0 - 1.0;
		return EXPTEMPVAR159;
	};
	i32 EXPVAR127;
	EXPVAR127 = SCREENX;
	i32 EXPVAR128;
	EXPVAR128 = SCREENY;
	i32 EXPVAR129;
	EXPVAR129 = graphicsinit(EXPVAR127, EXPVAR128);
	while(1)
	{
		i32 EXPVAR130;
		EXPVAR130 = 1;
		EXPVAR130 = !EXPVAR130;
		if(EXPVAR130)
		{
			break;
		}
		graphicspump();
		f32 FOV;
		f32 EXPTEMPVAR160;
		CPLPtr<f32> EXPTEMPVAR161;
		EXPTEMPVAR160 = FOV;
		EXPTEMPVAR161 = &(FOV);
		f32 EXPTEMPVAR162;
		EXPTEMPVAR162 = 2.09;
		*(EXPTEMPVAR161) = EXPTEMPVAR162;
		f32 fovCounter;
		f32 EXPTEMPVAR163;
		CPLPtr<f32> EXPTEMPVAR164;
		EXPTEMPVAR163 = fovCounter;
		EXPTEMPVAR164 = &(fovCounter);
		f32 EXPTEMPVAR165;
		f32 EXPVAR132;
		EXPVAR132 = FOV / 2.0;
		EXPTEMPVAR165 = 0 - EXPVAR132;
		*(EXPTEMPVAR164) = EXPTEMPVAR165;
		f32 fovStepSize;
		f32 EXPTEMPVAR166;
		CPLPtr<f32> EXPTEMPVAR167;
		EXPTEMPVAR166 = fovStepSize;
		EXPTEMPVAR167 = &(fovStepSize);
		f32 EXPTEMPVAR168;
		EXPTEMPVAR168 = FOV / SCREENX;
		*(EXPTEMPVAR167) = EXPTEMPVAR168;
		i32 xCounter;
		i32 EXPTEMPVAR169;
		CPLPtr<i32> EXPTEMPVAR170;
		EXPTEMPVAR169 = xCounter;
		EXPTEMPVAR170 = &(xCounter);
		i32 EXPTEMPVAR171;
		EXPTEMPVAR171 = 0;
		*(EXPTEMPVAR170) = EXPTEMPVAR171;
		while(1)
		{
			UNKNOWN EXPVAR133;
			f32 EXPVAR134;
			EXPVAR134 = FOV / 2.0;
			EXPVAR133 = fovCounter < EXPVAR134;
			EXPVAR133 = !EXPVAR133;
			if(EXPVAR133)
			{
				break;
			}
			f32 depth;
			f32 EXPTEMPVAR172;
			CPLPtr<f32> EXPTEMPVAR173;
			EXPTEMPVAR172 = depth;
			EXPTEMPVAR173 = &(depth);
			f32 EXPTEMPVAR174;
			f32 EXPVAR135;
			EXPVAR135 = fovCounter;
			f32 EXPVAR136;
			EXPVAR136 = getDepth(EXPVAR135);
			EXPTEMPVAR174 = EXPVAR136;
			*(EXPTEMPVAR173) = EXPTEMPVAR174;
			i32 EXPVAR137;
			EXPVAR137 = xCounter;
			f32 EXPVAR138;
			f32 EXPVAR139;
			EXPVAR139 = 0.5 / depth;
			EXPVAR138 = EXPVAR139 * SCREENY;
			f32 EXPVAR140;
			EXPVAR140 = depth;
			drawLine(EXPVAR137, EXPVAR138, EXPVAR140);
			i32 EXPTEMPVAR175;
			CPLPtr<i32> EXPTEMPVAR176;
			EXPTEMPVAR175 = xCounter;
			EXPTEMPVAR176 = &(xCounter);
			i32 EXPTEMPVAR177;
			EXPTEMPVAR177 = xCounter + 1;
			*(EXPTEMPVAR176) = EXPTEMPVAR177;
			f32 EXPTEMPVAR178;
			CPLPtr<f32> EXPTEMPVAR179;
			EXPTEMPVAR178 = fovCounter;
			EXPTEMPVAR179 = &(fovCounter);
			f32 EXPTEMPVAR180;
			EXPTEMPVAR180 = fovCounter + fovStepSize;
			*(EXPTEMPVAR179) = EXPTEMPVAR180;
		}
		f32 EXPTEMPVAR181;
		CPLPtr<f32> EXPTEMPVAR182;
		EXPTEMPVAR181 = playerRot;
		EXPTEMPVAR182 = &(playerRot);
		f32 EXPTEMPVAR183;
		EXPTEMPVAR183 = playerRot + 0.1;
		*(EXPTEMPVAR182) = EXPTEMPVAR183;
		drawScreenBuffer();
		i32 EXPVAR143;
		EXPVAR143 = 500;
		i32 EXPVAR144;
		EXPVAR144 = graphicssleep(EXPVAR143);
		clearScreen();
		i32 EXPVAR146;
		EXPVAR146 = 0;
		i32 EXPVAR147;
		EXPVAR147 = SCREENY / 2;
		i32 EXPVAR148;
		EXPVAR148 = SCREENX;
		i32 EXPVAR149;
		EXPVAR149 = SCREENY / 2;
		drawRect(EXPVAR146, EXPVAR147, EXPVAR148, EXPVAR149);
		i32 EXPVAR151;
		EXPVAR151 = 9;
		printn(EXPVAR151);
		println();
	}
}


int main(){
    cplMain();
    return 0;
}

