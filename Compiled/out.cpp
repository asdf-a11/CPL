
#define SAFE true
#include <iostream>
#include <vector>
#include <cstddef>
#include "../CppFiles/CplCppList.hpp"
#include "../CppFiles/CplPtr.hpp"
#include "../CppFiles/CPLGraphics.hpp"

#define i32 int
#define i16 short
#define i8 signed char
#define f32 float
#define UNKNOWN int
#define byte unsigned char
#define ui8 byte
#define type char

#define VARTYPE sizeof(int)

void printc(i32 character){
    std::cout << (char)character;
}
void printf(f32 value){
    std::cout << value;
}
void printn(i32 value){
    std::cout << value;
}
CPLPtr<ui8> shalloc(i32 size){
    CPLPtr<ui8> o;
    o.ptr = (char*)new ui8 [size];
    return o;
}

void cplMain(void)
{
	i32 SCREENX;
	i32 EXPTEMPVAR0;
	CPLPtr<i32> EXPTEMPVAR1;
	EXPTEMPVAR0 = SCREENX;
	EXPTEMPVAR1 = &(SCREENX);
	i32 EXPTEMPVAR2;
	EXPTEMPVAR2 = 600;
	*(EXPTEMPVAR1) = EXPTEMPVAR2;
	i32 SCREENY;
	i32 EXPTEMPVAR3;
	CPLPtr<i32> EXPTEMPVAR4;
	EXPTEMPVAR3 = SCREENY;
	EXPTEMPVAR4 = &(SCREENY);
	i32 EXPTEMPVAR5;
	EXPTEMPVAR5 = 600;
	*(EXPTEMPVAR4) = EXPTEMPVAR5;
	i32 PLAYERSIZEX;
	i32 EXPTEMPVAR6;
	CPLPtr<i32> EXPTEMPVAR7;
	EXPTEMPVAR6 = PLAYERSIZEX;
	EXPTEMPVAR7 = &(PLAYERSIZEX);
	i32 EXPTEMPVAR8;
	EXPTEMPVAR8 = 20;
	*(EXPTEMPVAR7) = EXPTEMPVAR8;
	i32 PLAYERSIZEY;
	i32 EXPTEMPVAR9;
	CPLPtr<i32> EXPTEMPVAR10;
	EXPTEMPVAR9 = PLAYERSIZEY;
	EXPTEMPVAR10 = &(PLAYERSIZEY);
	i32 EXPTEMPVAR11;
	EXPTEMPVAR11 = 20;
	*(EXPTEMPVAR10) = EXPTEMPVAR11;
	i32 EXPVAR0;
	EXPVAR0 = SCREENX;
	i32 EXPVAR1;
	EXPVAR1 = SCREENY;
	i32 EXPVAR2;
	EXPVAR2 = graphicsinit(EXPVAR0, EXPVAR1);
	i32 playerPosX;
	i32 EXPTEMPVAR12;
	CPLPtr<i32> EXPTEMPVAR13;
	EXPTEMPVAR12 = playerPosX;
	EXPTEMPVAR13 = &(playerPosX);
	i32 EXPTEMPVAR14;
	EXPTEMPVAR14 = SCREENX / 2;
	*(EXPTEMPVAR13) = EXPTEMPVAR14;
	i32 playerPosY;
	i32 EXPTEMPVAR15;
	CPLPtr<i32> EXPTEMPVAR16;
	EXPTEMPVAR15 = playerPosY;
	EXPTEMPVAR16 = &(playerPosY);
	i32 EXPTEMPVAR17;
	i32 EXPVAR3;
	EXPVAR3 = SCREENY - PLAYERSIZEY;
	EXPTEMPVAR17 = EXPVAR3 - 5;
	*(EXPTEMPVAR16) = EXPTEMPVAR17;
	i32 playerSpeed;
	i32 EXPTEMPVAR18;
	CPLPtr<i32> EXPTEMPVAR19;
	EXPTEMPVAR18 = playerSpeed;
	EXPTEMPVAR19 = &(playerSpeed);
	i32 EXPTEMPVAR20;
	EXPTEMPVAR20 = 30;
	*(EXPTEMPVAR19) = EXPTEMPVAR20;
	CPLPtr<ui8> screenBuffer;
	CPLPtr<ui8> EXPTEMPVAR21;
	CPLPtr<CPLPtr<ui8>> EXPTEMPVAR22;
	EXPTEMPVAR21 = screenBuffer;
	EXPTEMPVAR22 = &(screenBuffer);
	CPLPtr<ui8> EXPTEMPVAR23;
	i32 EXPVAR4;
	i32 EXPVAR5;
	EXPVAR5 = SCREENX * SCREENY;
	EXPVAR4 = EXPVAR5 * 3;
	CPLPtr<ui8> EXPVAR6;
	EXPVAR6 = shalloc(EXPVAR4);
	EXPTEMPVAR23 = EXPVAR6;
	*(EXPTEMPVAR22) = EXPTEMPVAR23;
	i32 enemyCount;
	i32 EXPTEMPVAR24;
	CPLPtr<i32> EXPTEMPVAR25;
	EXPTEMPVAR24 = enemyCount;
	EXPTEMPVAR25 = &(enemyCount);
	i32 EXPTEMPVAR26;
	EXPTEMPVAR26 = 10;
	*(EXPTEMPVAR25) = EXPTEMPVAR26;
	i32 EXPTEMPVAR27;
	EXPTEMPVAR27 = enemyCount;
	CPL_LIST<i32> enemyXList(EXPTEMPVAR27);
	i32 EXPTEMPVAR28;
	EXPTEMPVAR28 = enemyCount;
	CPL_LIST<i32> enemyYList(EXPTEMPVAR28);
	i32 enemySizeX;
	i32 EXPTEMPVAR29;
	CPLPtr<i32> EXPTEMPVAR30;
	EXPTEMPVAR29 = enemySizeX;
	EXPTEMPVAR30 = &(enemySizeX);
	i32 EXPTEMPVAR31;
	EXPTEMPVAR31 = 20;
	*(EXPTEMPVAR30) = EXPTEMPVAR31;
	i32 enemySizeY;
	i32 EXPTEMPVAR32;
	CPLPtr<i32> EXPTEMPVAR33;
	EXPTEMPVAR32 = enemySizeY;
	EXPTEMPVAR33 = &(enemySizeY);
	i32 EXPTEMPVAR34;
	EXPTEMPVAR34 = 20;
	*(EXPTEMPVAR33) = EXPTEMPVAR34;
	auto initEnemies = [&](void)
	{
		i32 counter;
		i32 EXPTEMPVAR35;
		CPLPtr<i32> EXPTEMPVAR36;
		EXPTEMPVAR35 = counter;
		EXPTEMPVAR36 = &(counter);
		i32 EXPTEMPVAR37;
		EXPTEMPVAR37 = 0;
		*(EXPTEMPVAR36) = EXPTEMPVAR37;
		while(1)
		{
			UNKNOWN EXPVAR7;
			EXPVAR7 = counter < enemyCount;
			EXPVAR7 = !EXPVAR7;
			if(EXPVAR7)
			{
				break;
			};
			i32 EXPTEMPVAR38;
			EXPTEMPVAR38 = counter;
			UNKNOWN EXPTEMPVAR39;
			CPLPtr<i32> EXPTEMPVAR40;
			i32 EXPVAR8;
			EXPVAR8 = counter;
			UNKNOWN EXPVAR9;
			EXPVAR9 = enemyXList[EXPVAR8];
			EXPTEMPVAR39 = EXPVAR9;
			i32 IROPT0;
			type IROPT3;
			i32 IROPT2;
			IROPT2 = sizeof(i32);
			IROPT0 = EXPVAR8 * IROPT2;
			CPLPtr<i32> IROPT1;
			IROPT1 = &(enemyXList);
			EXPTEMPVAR40 = IROPT0 + IROPT1;
			i32 EXPTEMPVAR41;
			i32 EXPVAR10;
			EXPVAR10 = counter * 30;
			EXPTEMPVAR41 = EXPVAR10 + 10;
			*(EXPTEMPVAR40) = EXPTEMPVAR41;
			i32 EXPTEMPVAR42;
			EXPTEMPVAR42 = counter;
			UNKNOWN EXPTEMPVAR43;
			CPLPtr<i32> EXPTEMPVAR44;
			i32 EXPVAR11;
			EXPVAR11 = counter;
			UNKNOWN EXPVAR12;
			EXPVAR12 = enemyYList[EXPVAR11];
			EXPTEMPVAR43 = EXPVAR12;
			i32 IROPT4;
			type IROPT7;
			i32 IROPT6;
			IROPT6 = sizeof(i32);
			IROPT4 = EXPVAR11 * IROPT6;
			CPLPtr<i32> IROPT5;
			IROPT5 = &(enemyYList);
			EXPTEMPVAR44 = IROPT4 + IROPT5;
			i32 EXPTEMPVAR45;
			EXPTEMPVAR45 = counter * 10;
			*(EXPTEMPVAR44) = EXPTEMPVAR45;
			i32 EXPTEMPVAR46;
			CPLPtr<i32> EXPTEMPVAR47;
			EXPTEMPVAR46 = counter;
			EXPTEMPVAR47 = &(counter);
			i32 EXPTEMPVAR48;
			EXPTEMPVAR48 = counter + 1;
			*(EXPTEMPVAR47) = EXPTEMPVAR48;
		};
	};
	auto drawScreenBuffer = [&](void)
	{
		i32 x;
		i32 EXPTEMPVAR49;
		CPLPtr<i32> EXPTEMPVAR50;
		EXPTEMPVAR49 = x;
		EXPTEMPVAR50 = &(x);
		i32 EXPTEMPVAR51;
		EXPTEMPVAR51 = 0;
		*(EXPTEMPVAR50) = EXPTEMPVAR51;
		i32 counter;
		i32 EXPTEMPVAR52;
		CPLPtr<i32> EXPTEMPVAR53;
		EXPTEMPVAR52 = counter;
		EXPTEMPVAR53 = &(counter);
		i32 EXPTEMPVAR54;
		EXPTEMPVAR54 = 0;
		*(EXPTEMPVAR53) = EXPTEMPVAR54;
		while(1)
		{
			UNKNOWN EXPVAR13;
			EXPVAR13 = x < SCREENX;
			EXPVAR13 = !EXPVAR13;
			if(EXPVAR13)
			{
				break;
			};
			i32 y;
			i32 EXPTEMPVAR55;
			CPLPtr<i32> EXPTEMPVAR56;
			EXPTEMPVAR55 = y;
			EXPTEMPVAR56 = &(y);
			i32 EXPTEMPVAR57;
			EXPTEMPVAR57 = 0;
			*(EXPTEMPVAR56) = EXPTEMPVAR57;
			while(1)
			{
				UNKNOWN EXPVAR14;
				EXPVAR14 = y < SCREENY;
				EXPVAR14 = !EXPVAR14;
				if(EXPVAR14)
				{
					break;
				};
				i32 EXPVAR15;
				EXPVAR15 = x;
				i32 EXPVAR16;
				EXPVAR16 = y;
				ui8 EXPVAR17;
				CPLPtr<ui8> EXPVAR18;
				EXPVAR18 = screenBuffer + counter;
				EXPVAR17 = *(EXPVAR18);
				ui8 EXPVAR19;
				CPLPtr<ui8> EXPVAR20;
				CPLPtr<ui8> EXPVAR21;
				EXPVAR21 = screenBuffer + counter;
				EXPVAR20 = EXPVAR21 + 1;
				EXPVAR19 = *(EXPVAR20);
				ui8 EXPVAR22;
				CPLPtr<ui8> EXPVAR23;
				CPLPtr<ui8> EXPVAR24;
				EXPVAR24 = screenBuffer + counter;
				EXPVAR23 = EXPVAR24 + 2;
				EXPVAR22 = *(EXPVAR23);
				i32 EXPVAR25;
				EXPVAR25 = drawpixel(EXPVAR15, EXPVAR16, EXPVAR17, EXPVAR19, EXPVAR22);
				i32 EXPTEMPVAR58;
				CPLPtr<i32> EXPTEMPVAR59;
				EXPTEMPVAR58 = counter;
				EXPTEMPVAR59 = &(counter);
				i32 EXPTEMPVAR60;
				EXPTEMPVAR60 = counter + 3;
				*(EXPTEMPVAR59) = EXPTEMPVAR60;
				i32 EXPTEMPVAR61;
				CPLPtr<i32> EXPTEMPVAR62;
				EXPTEMPVAR61 = y;
				EXPTEMPVAR62 = &(y);
				i32 EXPTEMPVAR63;
				EXPTEMPVAR63 = y + 1;
				*(EXPTEMPVAR62) = EXPTEMPVAR63;
			};
			i32 EXPTEMPVAR64;
			CPLPtr<i32> EXPTEMPVAR65;
			EXPTEMPVAR64 = x;
			EXPTEMPVAR65 = &(x);
			i32 EXPTEMPVAR66;
			EXPTEMPVAR66 = x + 1;
			*(EXPTEMPVAR65) = EXPTEMPVAR66;
		};
	};
	auto drawRect = [&](i32 xPos, i32 yPos, i32 sx, i32 sy)
	{
		i32 x;
		i32 EXPTEMPVAR67;
		CPLPtr<i32> EXPTEMPVAR68;
		EXPTEMPVAR67 = x;
		EXPTEMPVAR68 = &(x);
		i32 EXPTEMPVAR69;
		EXPTEMPVAR69 = 0;
		*(EXPTEMPVAR68) = EXPTEMPVAR69;
		while(1)
		{
			UNKNOWN EXPVAR26;
			EXPVAR26 = x < sx;
			EXPVAR26 = !EXPVAR26;
			if(EXPVAR26)
			{
				break;
			};
			i32 y;
			i32 EXPTEMPVAR70;
			CPLPtr<i32> EXPTEMPVAR71;
			EXPTEMPVAR70 = y;
			EXPTEMPVAR71 = &(y);
			i32 EXPTEMPVAR72;
			EXPTEMPVAR72 = 0;
			*(EXPTEMPVAR71) = EXPTEMPVAR72;
			while(1)
			{
				UNKNOWN EXPVAR27;
				EXPVAR27 = y < sy;
				EXPVAR27 = !EXPVAR27;
				if(EXPVAR27)
				{
					break;
				};
				i32 screenPos;
				i32 EXPTEMPVAR73;
				CPLPtr<i32> EXPTEMPVAR74;
				EXPTEMPVAR73 = screenPos;
				EXPTEMPVAR74 = &(screenPos);
				i32 EXPTEMPVAR75;
				i32 EXPVAR28;
				i32 EXPVAR29;
				i32 EXPVAR30;
				EXPVAR30 = xPos + x;
				EXPVAR29 = EXPVAR30 * SCREENX;
				i32 EXPVAR31;
				EXPVAR31 = yPos + y;
				EXPVAR28 = EXPVAR29 + EXPVAR31;
				EXPTEMPVAR75 = EXPVAR28 * 3;
				*(EXPTEMPVAR74) = EXPTEMPVAR75;
				UNKNOWN EXPVAR32;
				UNKNOWN EXPVAR33;
				i32 EXPVAR34;
				i32 EXPVAR35;
				i32 EXPVAR36;
				EXPVAR36 = SCREENX * SCREENY;
				EXPVAR35 = EXPVAR36 * 3;
				EXPVAR34 = EXPVAR35 - 3;
				EXPVAR33 = screenPos < EXPVAR34;
				UNKNOWN EXPVAR37;
				EXPVAR37 = screenPos < 0;
				EXPVAR32 = EXPVAR33 or EXPVAR37;
				if(EXPVAR32)
				{
					ui8 EXPTEMPVAR76;
					CPLPtr<ui8> EXPTEMPVAR77;
					CPLPtr<ui8> EXPVAR38;
					EXPVAR38 = screenBuffer + screenPos;
					EXPTEMPVAR76 = *(EXPVAR38);
					EXPTEMPVAR77 = EXPVAR38;
					i32 EXPTEMPVAR78;
					EXPTEMPVAR78 = 255;
					*(EXPTEMPVAR77) = EXPTEMPVAR78;
					ui8 EXPTEMPVAR79;
					CPLPtr<ui8> EXPTEMPVAR80;
					CPLPtr<ui8> EXPVAR39;
					CPLPtr<ui8> EXPVAR40;
					EXPVAR40 = screenBuffer + screenPos;
					EXPVAR39 = EXPVAR40 + 1;
					EXPTEMPVAR79 = *(EXPVAR39);
					EXPTEMPVAR80 = EXPVAR39;
					i32 EXPTEMPVAR81;
					EXPTEMPVAR81 = 0;
					*(EXPTEMPVAR80) = EXPTEMPVAR81;
					ui8 EXPTEMPVAR82;
					CPLPtr<ui8> EXPTEMPVAR83;
					CPLPtr<ui8> EXPVAR41;
					CPLPtr<ui8> EXPVAR42;
					EXPVAR42 = screenBuffer + screenPos;
					EXPVAR41 = EXPVAR42 + 2;
					EXPTEMPVAR82 = *(EXPVAR41);
					EXPTEMPVAR83 = EXPVAR41;
					i32 EXPTEMPVAR84;
					EXPTEMPVAR84 = 30;
					*(EXPTEMPVAR83) = EXPTEMPVAR84;
				};
				i32 EXPTEMPVAR85;
				CPLPtr<i32> EXPTEMPVAR86;
				EXPTEMPVAR85 = y;
				EXPTEMPVAR86 = &(y);
				i32 EXPTEMPVAR87;
				EXPTEMPVAR87 = y + 1;
				*(EXPTEMPVAR86) = EXPTEMPVAR87;
			};
			i32 EXPTEMPVAR88;
			CPLPtr<i32> EXPTEMPVAR89;
			EXPTEMPVAR88 = x;
			EXPTEMPVAR89 = &(x);
			i32 EXPTEMPVAR90;
			EXPTEMPVAR90 = x + 1;
			*(EXPTEMPVAR89) = EXPTEMPVAR90;
		};
	};
	auto drawPlayer = [&](void)
	{
		i32 EXPVAR43;
		EXPVAR43 = playerPosX;
		i32 EXPVAR44;
		EXPVAR44 = playerPosY;
		i32 EXPVAR45;
		EXPVAR45 = PLAYERSIZEY;
		i32 EXPVAR46;
		EXPVAR46 = PLAYERSIZEX;
		drawRect(EXPVAR43, EXPVAR44, EXPVAR45, EXPVAR46);
	};
	auto drawEnemies = [&](void)
	{
		i32 counter;
		i32 EXPTEMPVAR91;
		CPLPtr<i32> EXPTEMPVAR92;
		EXPTEMPVAR91 = counter;
		EXPTEMPVAR92 = &(counter);
		i32 EXPTEMPVAR93;
		EXPTEMPVAR93 = 0;
		*(EXPTEMPVAR92) = EXPTEMPVAR93;
		while(1)
		{
			UNKNOWN EXPVAR48;
			EXPVAR48 = counter < enemyCount;
			EXPVAR48 = !EXPVAR48;
			if(EXPVAR48)
			{
				break;
			};
			UNKNOWN EXPVAR49;
			i32 EXPVAR50;
			EXPVAR50 = counter;
			UNKNOWN EXPVAR51;
			EXPVAR51 = enemyXList[EXPVAR50];
			EXPVAR49 = EXPVAR51;
			UNKNOWN EXPVAR52;
			i32 EXPVAR53;
			EXPVAR53 = counter;
			UNKNOWN EXPVAR54;
			EXPVAR54 = enemyYList[EXPVAR53];
			EXPVAR52 = EXPVAR54;
			i32 EXPVAR55;
			EXPVAR55 = enemySizeX;
			i32 EXPVAR56;
			EXPVAR56 = enemySizeY;
			drawRect(EXPVAR49, EXPVAR52, EXPVAR55, EXPVAR56);
			i32 EXPTEMPVAR94;
			CPLPtr<i32> EXPTEMPVAR95;
			EXPTEMPVAR94 = counter;
			EXPTEMPVAR95 = &(counter);
			i32 EXPTEMPVAR96;
			EXPTEMPVAR96 = counter + 1;
			*(EXPTEMPVAR95) = EXPTEMPVAR96;
		};
	};
	auto clearScreen = [&](void)
	{
		i32 counter;
		i32 EXPTEMPVAR97;
		CPLPtr<i32> EXPTEMPVAR98;
		EXPTEMPVAR97 = counter;
		EXPTEMPVAR98 = &(counter);
		i32 EXPTEMPVAR99;
		EXPTEMPVAR99 = 0;
		*(EXPTEMPVAR98) = EXPTEMPVAR99;
		while(1)
		{
			UNKNOWN EXPVAR58;
			i32 EXPVAR59;
			i32 EXPVAR60;
			EXPVAR60 = SCREENX * SCREENY;
			EXPVAR59 = EXPVAR60 * 3;
			EXPVAR58 = counter < EXPVAR59;
			EXPVAR58 = !EXPVAR58;
			if(EXPVAR58)
			{
				break;
			};
			ui8 EXPTEMPVAR100;
			CPLPtr<ui8> EXPTEMPVAR101;
			CPLPtr<ui8> EXPVAR61;
			EXPVAR61 = screenBuffer + counter;
			EXPTEMPVAR100 = *(EXPVAR61);
			EXPTEMPVAR101 = EXPVAR61;
			i32 EXPTEMPVAR102;
			EXPTEMPVAR102 = 0;
			*(EXPTEMPVAR101) = EXPTEMPVAR102;
			i32 EXPTEMPVAR103;
			CPLPtr<i32> EXPTEMPVAR104;
			EXPTEMPVAR103 = counter;
			EXPTEMPVAR104 = &(counter);
			i32 EXPTEMPVAR105;
			EXPTEMPVAR105 = counter + 1;
			*(EXPTEMPVAR104) = EXPTEMPVAR105;
		};
	};
	auto updatePlayer = [&](void)
	{
		UNKNOWN EXPVAR62;
		i32 EXPVAR63;
		EXPVAR63 = 97;
		i32 EXPVAR64;
		EXPVAR64 = getkeypress(EXPVAR63);
		UNKNOWN EXPVAR65;
		EXPVAR65 = EXPVAR64 == 1;
		EXPVAR62 = EXPVAR65;
		if(EXPVAR62)
		{
			i32 EXPTEMPVAR106;
			CPLPtr<i32> EXPTEMPVAR107;
			EXPTEMPVAR106 = playerPosX;
			EXPTEMPVAR107 = &(playerPosX);
			i32 EXPTEMPVAR108;
			EXPTEMPVAR108 = playerPosX - playerSpeed;
			*(EXPTEMPVAR107) = EXPTEMPVAR108;
		};
		UNKNOWN EXPVAR66;
		i32 EXPVAR67;
		EXPVAR67 = 100;
		i32 EXPVAR68;
		EXPVAR68 = getkeypress(EXPVAR67);
		UNKNOWN EXPVAR69;
		EXPVAR69 = EXPVAR68 == 1;
		EXPVAR66 = EXPVAR69;
		if(EXPVAR66)
		{
			i32 EXPTEMPVAR109;
			CPLPtr<i32> EXPTEMPVAR110;
			EXPTEMPVAR109 = playerPosX;
			EXPTEMPVAR110 = &(playerPosX);
			i32 EXPTEMPVAR111;
			EXPTEMPVAR111 = playerPosX + playerSpeed;
			*(EXPTEMPVAR110) = EXPTEMPVAR111;
		};
	};
	auto println = [&](void)
	{
		i32 EXPVAR70;
		EXPVAR70 = 10;
		printc(EXPVAR70);
		i32 EXPVAR72;
		EXPVAR72 = 13;
		printc(EXPVAR72);
	};
	initEnemies();
	while(1)
	{
		i32 EXPVAR75;
		EXPVAR75 = 1;
		EXPVAR75 = !EXPVAR75;
		if(EXPVAR75)
		{
			break;
		};
		graphicspump();
		updatePlayer();
		drawPlayer();
		drawEnemies();
		drawScreenBuffer();
		i32 EXPVAR81;
		EXPVAR81 = 500;
		i32 EXPVAR82;
		EXPVAR82 = graphicssleep(EXPVAR81);
		clearScreen();
	};
	while(1)
	{
		i32 EXPVAR84;
		EXPVAR84 = 1;
		EXPVAR84 = !EXPVAR84;
		if(EXPVAR84)
		{
			break;
		};
	};
}


int main(){
    cplMain();
    return 0;
}

